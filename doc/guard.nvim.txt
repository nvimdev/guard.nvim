*guard.nvim.txt*           For NVIM v0.8.0           Last change: 2025 June 10

==============================================================================
Table of Contents                               *guard.nvim-table-of-contents*

  - Features                                             |guard.nvim-features|
  - TLDR                                                     |guard.nvim-tldr|
  - Usage                                                   |guard.nvim-usage|
  - Further configuration                   |guard.nvim-further-configuration|
1. Creating new configurations        |guard.nvim-creating-new-configurations|
  - Examples: formatters|guard.nvim-creating-new-configurations-examples:-formatters|
  - Examples: linters|guard.nvim-creating-new-configurations-examples:-linters|
2. Advanced tips                                    |guard.nvim-advanced-tips|
  - Special case formatting logic|guard.nvim-advanced-tips-special-case-formatting-logic|
  - Custom logic with linters|guard.nvim-advanced-tips-custom-logic-with-linters|
  - Take advantage of autocmd events|guard.nvim-advanced-tips-take-advantage-of-autocmd-events|
  - Dynamic formatters           |guard.nvim-advanced-tips-dynamic-formatters|
3. Links                                                    |guard.nvim-links|
<https://luarocks.org/modules/xiaoshihou514/guard.nvim>

Async formatting and linting utility for neovim `0.10+`.


FEATURES                                                 *guard.nvim-features*

- Async and blazingly fast
- Builtin support for popular formatters and linters
- Minimal API allowing for full customization
- Light-weight


TLDR                                                         *guard.nvim-tldr*

|guard.nvim-`help-guard.nvim-tldr`|

- Install with your favorite package manager

>
    nvimdev/guard.nvim
<

- Register formatters:

>lua
    local ft = require('guard.filetype')
    ft('c'):fmt('clang-format')
<

demo
<https://github.com/user-attachments/assets/3160f979-6683-4288-870d-2447ee445431>

- Register linters

>lua
    local ft = require('guard.filetype')
    ft('lua'):lint('selene')
<

demo
<https://github.com/user-attachments/assets/2ee2fdaa-42b2-41b3-80ad-26a53bf16809>

- They can also be chained together:

>lua
    local ft = require('guard.filetype')
    ft('haskell'):fmt('ormolu')
                 :lint('hlint')
<

- Formatters and linters can also be chained:

>lua
    local ft = require('guard.filetype')
    ft('python'):fmt('isort')
                :append('black')
                :lint('mypy')
                :append('mypyc')
                :append('dmypy')
<

- You can register the same formatter for multiple filetypes:

>lua
    local ft = require('guard.filetype')
    ft('typescript,javascript,typescriptreact'):fmt('prettier')
<

- Lint all your files with `codespell`

>lua
    -- this does not work with formatters
    ft('*'):lint('codespell')
<

- Custom formatters:

>lua
    -- always use 4 spaces for c files
    ft('c'):fmt({
        cmd = "clang-format",
        args = { "--style={IndentWidth: 4}" },
        stdin = true,
    })
<


USAGE                                                       *guard.nvim-usage*

|guard.nvim-`help-guard.nvim-usage`|

Some presets can be configured via `vim.g.guard_config`

>lua
    -- defaults
    vim.g.guard_config = {
        -- format on write to buffer
        fmt_on_save = true,
        -- use lsp if no formatter was defined for this filetype
        lsp_as_default_formatter = false,
        -- whether or not to save the buffer after formatting
        save_on_fmt = true,
        -- automatic linting
        auto_lint = true,
        -- how frequently can linters be called
        lint_interval = 500
        -- show diagnostic after format done
        refresh_diagnostic = true,
    }
<

Here are all the `Guard` subcommands

  ------------------------------------------------------------------------
       Name                                Desc
  -------------- ---------------------------------------------------------
    Guard fmt     Manually call format, also works with visual mode (best
                                 effort range formatting)

    Guard lint                   Manually request for lint

      Guard           Turns auto formatting on for the current buffer
    enable-fmt   

      Guard          Turns auto formatting off for the current buffer
   disable-fmt   

      Guard               Turns linting on for the current buffer
   enable-lint   

      Guard              Turns linting off for the current buffer
   disable-lint  
  ------------------------------------------------------------------------

FURTHER CONFIGURATION                       *guard.nvim-further-configuration*

You can easily create your own configuration that’s not in
`guard-collection`, see `help guard.nvim-creating-new-configurations`
<./CUSTOMIZE.md>.

For more niche use cases, `help guard.nvim-advanced-tips` <./ADVANCED.md>
demonstrates how to:

- Write your own formatting logic using the `fn` field.
- Write your own linting logic using the `fn` field.
- Leverage guard’s autocmds to create a formatting status indicator.
- Creating a dynamic formatter that respects neovom tab/space settings.


==============================================================================
1. Creating new configurations        *guard.nvim-creating-new-configurations*

A tool is specified as follows:

>lua
    {
        -- specify an executable
        cmd              -- string: tool command
        args             -- string[]: command arguments
        fname            -- boolean: insert filename to args tail
        stdin            -- boolean: pass buffer contents into stdin
    
        -- or provide your own logic
        fn               -- function: write your own logic for formatting / linting, more in ADVANCED.md
    
        -- running condition
        ignore_patterns  -- string|string[]: don't run formatter when pattern match against file name
        ignore_error     -- boolean: when has lsp error ignore format
        find             -- string|string[]: format if the file is found in the lsp root dir
    
        -- misc
        env              -- table<string, string>?: environment variables passed to cmd (key value pair)
        timeout          -- integer
    
        -- special
        parse            -- function: linter only, parses linter output to neovim diagnostic
        events           -- { name: string, opt: autocmd options }: override default events, for formatter autocmds only the first one is used (passed in from `:fmt`)
        health           -- function: called in health checks
    }
<

guard also tries to require them if you have `guard-collection`.

You can also pass in a function that evaluates to the table above, it will be
evaluated every time you call format. See more here
<https://github.com/nvimdev/guard.nvim/blob/main/ADVANCED.md#dynamic-formatters>


EXAMPLES: FORMATTERS*guard.nvim-creating-new-configurations-examples:-formatters*

Let’s see a few formatters from `guard-collection`:

>lua
    rustfmt = {
      cmd = 'rustfmt',
      args = { '--edition', '2021', '--emit', 'stdout' },
      stdin = true,
    }
<

NB: Sometimes you may wish to run multiple formatters sequentially, this is
only possible if you have `stdin` set (or if you are using fn <./ADVANCED.md>)
for all your formatters. This design is intentional for keeping buffer contents
"valid". However, if you only wish to use one formatter, then letting the tool
itself to do the IO _may be_ faster.

>lua
    eslint_d = {
      cmd = 'npx',
      args = { 'eslint_d', '--fix-to-stdout', '--stdin', '--stdin-filename' },
      fname = true,
      stdin = true,
    }
    
    black = {
      cmd = 'black',
      args = { '--quiet', '-' },
      stdin = true,
    }
<


EXAMPLES: LINTERS   *guard.nvim-creating-new-configurations-examples:-linters*

In addition to all the formatter fields, a linter needs to provide a `parse`
function that takes the linter output and turns it into neovim diagnostics
(|vim.Diagnostic|).

This sounds very cumbersome! Fortunately guard provides some api to make it
smoother.

Let’s see an example: clang-tidy

>bash
    clang-tidy /tmp/test.c
<

Output ~

>
    Error while trying to load a compilation database:
    Could not auto-detect compilation database for file "/tmp/test.c"
    No compilation database found in /tmp or any parent directory
    fixed-compilation-database: Error while opening fixed database: No such file or directory
    json-compilation-database: Error while opening JSON database: No such file or directory
    Running without flags.
    1 warning generated.
    /tmp/test.c:6:20: warning: Division by zero [clang-analyzer-core.DivideZero]
    /tmp/test.c:6:20: warning: Division by zero [clang-analyzer-core.DivideZero]
        6 |     printf("%d", x / y);
          |                  ~~^~~
    /tmp/test.c:5:5: note: 'y' initialized to 0
        5 |     int y = 0;
          |     ^~~~~
    /tmp/test.c:6:20: note: Division by zero
        6 |     printf("%d", x / y);
          |                  ~~^~~
<

In this case we are most interested in this line:

>
    /tmp/test.c:6:20: warning: Division by zero [clang-analyzer-core.DivideZero]
<

And we can identify some elements:

>
    lnum = 6
    col = 20
    severity = warning
    message = Division by zero
    code = clang-analyzer-core.DivideZero
<

The following regex will give us the elements, and we just need them in a table

>lua
    local xs = { line:match(":(%d+):(%d+):%s+(%w+):%s+(.-)%s+%[(.-)%]") }
    local lookup = { ... } -- omitted
    local result = {
        lnum = xs[1],
        col = xs[2],
        -- The severity is a string, but neovim expects `:h vim.diagnostic.severity`
        severity = lookup[xs[3]],
        message = xs[4],
        code = xs[5]
    }
<

This pattern is encapsulated by `require("guard.lint").from_regex`

>lua
    clang_tidy = {
      cmd = 'clang-tidy',
      args = { '--quiet' },
      parse = lint.from_regex({
        source = 'clang-tidy',
        regex = ':(%d+):(%d+):%s+(%w+):%s+(.-)%s+%[(.-)%]',
        groups = { 'lnum', 'col', 'severity', 'message', 'code' },
        severities = {
          information = lint.severities.info,
          hint = lint.severities.info,
          note = lint.severities.style,
        },
      }),
    }
<

Another example:

>lua
    ktlint = {
      cmd = 'ktlint',
      args = { '--log-level=error' },
      fname = true,
      parse = lint.from_regex({
        source = 'ktlint',
        regex = ':(%d+):(%d+): (.+) %((.-)%)',
        groups = { 'lnum', 'col', 'message', 'code' },
        -- severities defaults to info, warning, error, style
      }),
    }
<

Figuring out the patterns can take a while, so for tools that support json
output, it’s usually easier to take the json, put it into a table, and get
the respective key.

This pattern is encapsulated by `require("guard.lint").from_json`, an example:

>bash
    cat /tmp/test.py | pylint --from-stdin true --output-format json
<

Output ~

>
    [
        {
            "type": "convention",
            "module": "true",
            "obj": "",
            "line": 89,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "true",
            "symbol": "line-too-long",
            "message": "Line too long (125/100)",
            "message-id": "C0301"
        },
        {
            "type": "convention",
            "module": "true",
            "obj": "",
            "line": 215,
            "column": 0,
            "endLine": null,
            "endColumn": null,
            "path": "true",
            "symbol": "line-too-long",
            "message": "Line too long (108/100)",
            "message-id": "C0301"
        }
    ]
<

>lua
    pylint = {
      cmd = 'pylint',
      args = { '--from-stdin', '--output-format', 'json' },
      stdin = true,
      parse = lint.from_json({
        attributes = {
          severity = 'type',
          code = 'symbol',
        },
        severities = {
          convention = lint.severities.info,
          refactor = lint.severities.info,
          informational = lint.severities.info,
          fatal = lint.severities.error,
        },
        source = 'pylint',
      }),
    }
<

Another example:

>lua
    ruff = {
      cmd = 'ruff',
      args = { '-n', '-e', '--output-format', 'json', '-', '--stdin-filename' },
      stdin = true,
      fname = true,
      parse = lint.from_json({
        attributes = {
          severity = 'type',
          -- if the json is very complex, pass a function
          lnum = function(js)
            return js['location']['row']
          end,
          col = function(js)
            return js['location']['column']
          end,
        },
        severities = {
          E = lint.severities.error, -- pycodestyle errors
          -- other severities omitted
        },
        source = 'ruff',
      }),
    }
<


==============================================================================
2. Advanced tips                                    *guard.nvim-advanced-tips*


SPECIAL CASE FORMATTING LOGIC*guard.nvim-advanced-tips-special-case-formatting-logic*

With the introduction of `vim.system` in neovim 0.10, it is now easy to write
custom formatting logic. Let’s work through an example of how you could do
so.

`prettierd` does not work well with guard because of it’s error mechanism.
Guard follows a reasonable unix standard when it comes to determining exit
status, that is, assuming the program would exit with non-zero exit code and
print some reasonable error message in stderr:

>lua
    if exit_code ~= 0 and num_stderr_chunks ~= 0 then
        -- failed
    else
        -- success
    end
<

However, `prettierd` prints error messages to stdout, so guard will fail to
detect an error and proceed to replace your code with its error message :cry:

But fear not! You can create your custom logic by passing a function in the
config table, let’s do this step by step:

>lua
    local function prettierd_fmt(buf, range, acc)
        local co = assert(coroutine.running())
    end
<

Guard runs the format function in a coroutine so as not to block the UI, to
achieve what we want we have to interact with the current coroutine.

We can now go on to mimic how we would call `prettierd` on the cmdline:

>
    cat test.js | prettierd test.js
<

>lua
    -- previous code omitted
    local handle = vim.system({ "prettierd", vim.api.nvim_buf_get_name(buf) }, {
    	stdin = true,
    }, function(result)
    	if result.code ~= 0 then
    		-- "returns" the error
    		coroutine.resume(co, result)
    	else
    		-- "returns" the result
    		coroutine.resume(co, result.stdout)
    	end
    end)
<

We get the unformatted code, then call `vim.system` with 3 arguments

- the cmd, which is of the form `prettierd <file>`
- the option table, here we only specified that we wish to write to its stdin, but you can refer to |vim.system| for more options
- the `at_exit` function, which takes in a result table (again, check out |vim.system| for more details)

Now we can do our custom error handling, here we simply return if `prettierd`
failed. But if it succeeded we replace the range with the formatted code and
save the file.

Finally we write the unformatted code to stdin

>lua
    -- previous code omitted
    handle:write(acc)
    handle:write(nil)           -- closes stdin
    return coroutine.yield()    -- this returns either the error or the formatted code we returned earlier
<

Whoa la! Now we can tell guard to register our formatting function

>lua
    ft("javascript"):fmt({
        fn = prettierd_fmt
    })
<

demo
<https://github.com/xiaoshihou514/guard.nvim/assets/108414369/56dd35d4-8bf6-445a-adfd-8786fb461021>

You can always refer to spawn.lua
<https://github.com/nvimdev/guard.nvim/blob/main/lua/guard/spawn.lua>.


CUSTOM LOGIC WITH LINTERS *guard.nvim-advanced-tips-custom-logic-with-linters*

`clippy-driver` is a linter for rust, because it prints diagnostics to stderr,
you cannot just specify it the usual way. But guard allows you to pass a custom
function, which would make it work :)

Let’s start by doing some imports:

>lua
    local ft = require("guard.filetype")
    local lint = require("guard.lint")
<

The lint function is a simple modification of the one in spawn.lua
<https://github.com/nvimdev/guard.nvim/blob/main/lua/guard/spawn.lua>.

>lua
    local function clippy_driver_lint(acc)
        local co = assert(coroutine.running())
        local handle = vim.system({ "clippy-driver", "-", "--error-format=json", "--edition=2021" }, {
        stdin = true,
        }, function(result)
            -- wake coroutine on exit, omit error checking
            coroutine.resume(co, result.stderr)
        end)
        -- write contents to stdin and close it
        handle:write(acc)
        handle:write(nil)
        -- sleep until awakened after process finished
        return coroutine.yield()
    end
<

We register it via guard:

>lua
    ft("rust"):lint({
        fn = clippy_driver_lint,
        stdin = true,
        parse = clippy_diagnostic_parse, -- TODO!
    })
<

To write the lint function, we inspect the output of `clippy-driver` when
called with the arguments above:

full output ~

>
    ❯ cat test.rs
    fn main() {
        let _ = 'a' .. 'z';
        if 42 > i32::MAX {}
    }
    ❯ cat test.rs | clippy-driver - --error-format=json --edition=2021
    {"$message_type":"diagnostic","message":"almost complete ascii range","code":{"code":"clippy::almost_complete_range","explanation":null},"level":"warning","spans":[{"file_name":"<anon>","byte_start":24,"byte_end":34,"line_start":2,"line_end":2,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"    let _ = 'a' .. 'z';","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_range","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::almost_complete_range)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use an inclusive range","code":null,"level":"help","spans":[{"file_name":"<anon>","byte_start":28,"byte_end":30,"line_start":2,"line_end":2,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"    let _ = 'a' .. 'z';","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"warning: almost complete ascii range\n --> <anon>:2:13\n  |\n2 |     let _ = 'a' .. 'z';\n  |             ^^^^--^^^^\n  |                 |\n  |                 help: use an inclusive range: `..=`\n  |\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_range\n  = note: `#[warn(clippy::almost_complete_range)]` on by default\n\n"}
    {"$message_type":"diagnostic","message":"this comparison involving the minimum or maximum element for this type contains a case that is always true or always false","code":{"code":"clippy::absurd_extreme_comparisons","explanation":null},"level":"error","spans":[{"file_name":"<anon>","byte_start":43,"byte_end":56,"line_start":3,"line_end":3,"column_start":8,"column_end":21,"is_primary":true,"text":[{"text":"    if 42 > i32::MAX {}","highlight_start":8,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"because `i32::MAX` is the maximum value for this type, this comparison is always false","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[deny(clippy::absurd_extreme_comparisons)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n --> <anon>:3:8\n  |\n3 |     if 42 > i32::MAX {}\n  |        ^^^^^^^^^^^^^\n  |\n  = help: because `i32::MAX` is the maximum value for this type, this comparison is always false\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons\n  = note: `#[deny(clippy::absurd_extreme_comparisons)]` on by default\n\n"}
    {"$message_type":"diagnostic","message":"aborting due to 1 previous error; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"error: aborting due to 1 previous error; 1 warning emitted\n\n"}
<

That’s a lot of output! But we can see three main blocks: the first two
diagnostics and the last one an overview. We only need the first two:

>lua
    local clippy_diagnostic_parse = lint.from_json({
    		get_diagnostics = function(line)
    			local json = vim.json.decode(line)
                -- ignore overview json which does not have position info
    			if not vim.tbl_isempty(json.spans) then
    				return json
    			end
    		end,
            lines = true,
    		attributes = { ... } -- TODO
        })
<

Now our diagnostics are transformed into a list of json, we just need to get
the attributes we need: the positions, the message and the error level.
That’s what the attributes field does, it extracts them from the json table:

>lua
    attributes = {
        -- it is json turned into a lua table
        lnum = function(it)
            return math.ceil(tonumber(it.spans[1].line_start))
        end,
        lnum_end = function(it)
            return math.ceil(tonumber(it.spans[1].line_end))
        end,
        code = function(it)
            return it.code.code
        end,
        col = function(it)
            return it.spans[1].column_start
        end,
        col_end = function(it)
            return it.spans[1].column_end
        end,
        severity = "level",     -- "it.level"
        message = "message",    -- "it.message"
    },
<

Et voilà!


TAKE ADVANTAGE OF AUTOCMD EVENTS*guard.nvim-advanced-tips-take-advantage-of-autocmd-events*

Guard exposes a `GuardFmt` user event that you can use. It is called both
before formatting starts and after it is completely done. To differentiate
between pre-format and post-format calls, a `data` table is passed.

>lua
    -- for pre-format calls
    data = {
        status = "pending", -- type: string, called whenever a format is requested
        using = {...}       -- type: table, formatters that are going to run
    }
    -- for post-format calls
    data = {
        status = "done",    -- type: string, only called on success
    }
    -- or
    data = {
        status = "failed"   -- type: string, buffer remain unchanged
        msg = "..."         -- type: string, reason for failure
    }
<

A handy use case for it is to retrieve formatting status, here’s a bare-bones
example:

>lua
    local is_formatting = false
    _G.guard_status = function()
        -- display icon if auto-format is enabled for current buffer
        local au = vim.api.nvim_get_autocmds({
            group = "Guard",
            buffer = 0,
        })
        if filetype[vim.bo.ft] and #au ~= 0 then
            return is_formatting and "" or ""
        end
        return ""
    end
    -- sets a super simple statusline when entering a buffer
    vim.cmd("au BufEnter * lua vim.opt.stl = [[%f %m ]] .. guard_status()")
    -- update statusline on GuardFmt event
    vim.api.nvim_create_autocmd("User", {
        pattern = "GuardFmt",
        callback = function(opt)
            -- receive data from opt.data
            is_formatting = opt.data.status == "pending"
            vim.opt.stl = [[%f %m ]] .. guard_status()
        end,
    })
<

demo
<https://github.com/xiaoshihou514/guard.nvim/assets/108414369/339ff4ff-288c-49e4-8ab1-789a6175d201>

You can do the similar for your statusline plugin of choice as long as you
"refresh" it on `GuardFmt`.


DYNAMIC FORMATTERS               *guard.nvim-advanced-tips-dynamic-formatters*

A formatter can be a function that returns a config, using this you can
implement some pretty interesting behaviour, in #168
<https://github.com/nvimdev/guard.nvim/issues/168>, one of the users asked for
a particular formatter to respect editor space/tab settings. It’s achievable
by using `fn`, but using function configs are easier and more straight forward,
let’s see how we can cook up the behaviour we want:

>lua
    local ft = require("guard.filetype")
    
    ft("c"):fmt(function()
      if vim.uv.fs_stat(".clang-format") then
        return {
          cmd = "clang-format",
          stdin = true,
        }
      else
        return {
          cmd = "clang-format",
          args = {
            ("--style={BasedOnStyle: llvm, IndentWidth: %d, TabWidth: %d, UseTab: %s}"):format(
              vim.bo.shiftwidth,
              vim.bo.tabstop,
              vim.bo.expandtab and "Never" or "Always"
            ),
          },
          stdin = true,
        }
      end
    end)
<

What we are doing here is try look for a `.clang-format` configuration file, if
found, great, just use that. Otherwise, we want `clang-format` to respect the
editor’s settings, here I am using space/tab settings as an example, but you
can easily tell that this can extend to anything.

By using this config, we get a formatting behaviour that respects our _live
input_, you can run `set sw=16` and the next time `clang-format` will give you
a file that uses 16 spaces as indent (please do not try this at home :smile:).

==============================================================================
3. Links                                                    *guard.nvim-links*

1. *LuaRocks*: https://img.shields.io/luarocks/v/xiaoshihou514/guard.nvim?logo=lua&color=green
2. *GitHub Actions Workflow Status*: https://img.shields.io/github/actions/workflow/status/nvimdev/guard.nvim/test.yml?label=tests
3. *GitHub Actions Workflow Status*: https://img.shields.io/github/actions/workflow/status/nvimdev/guard.nvim/ci.yml?label=lint
4. *image*: https:/github.com/xiaoshihou514/guard.nvim/assets/108414369/f9137b5a-ae69-494f-9f5b-b6044ae63c86

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
